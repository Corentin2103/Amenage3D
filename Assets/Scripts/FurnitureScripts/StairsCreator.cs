using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using ErgoShop.POCO;
using ErgoShop.UI;
using ErgoShop.Utils;
using ProBuilder2.Common;
using ProBuilder2.MeshOperations;
using UnityEngine;

namespace ErgoShop.Managers
{
    /// <summary>
    /// Stairs manager. Handle creation, movment, delete.
    /// This manager uses the ProBuilder2 runtime mesh generator
    /// More info at https://docs.unity3d.com/Packages/com.unity.probuilder@4.0/manual/api.html
    /// </summary>
    public class StairsCreator : CreatorBehaviour
    {
        /// <summary>
        /// Sprite tile used to make both straight and round stairs
        /// </summary>
        public GameObject roundedStairs2DPrefab;

        /// <summary>
        /// all stairs of the current floor
        /// </summary>        
        private List<Stairs> m_stairs;

        /// <summary>
        /// Instance
        /// </summary>
        public static StairsCreator Instance { get; private set; }
        
        private void Awake()
        {
            Instance = this;
        }

        private void Start()
        {
            m_stairs = new List<Stairs>();
        }

        private void Update()
        {
            // RIGIDBODIES
            foreach (var s in m_stairs)
            {
                var rb = s.associated3DObject.GetComponent<Rigidbody>();
                // Freeze all except if its current selected furniture
                if (SelectedObjectManager.Instance.currentStairs.Contains(s))
                {
                    if (s.IsOnWall)
                    {
                        rb.constraints = RigidbodyConstraints.FreezeRotation;
                        rb.useGravity = false;
                    }
                    else
                    {
                        rb.constraints = RigidbodyConstraints.FreezeRotation | RigidbodyConstraints.FreezePositionY;
                    }
                }
                else
                {
                    rb.constraints = RigidbodyConstraints.FreezeAll;
                }

                // update 2D position if moving
                if (s.associated3DObject?.GetComponent<Rigidbody>().velocity.magnitude > 0)
                {
                    s.Position = s.associated3DObject.transform.position;
                    s.associated2DObject.transform.position =
                        VectorFunctions.Switch3D2D(s.Position);// + s.Depth / 2f * s.associated3DObject.transform.forward);
                    rb.velocity *= 0.5f;
                }
            }
        }

        /// <summary>
        /// Generate 3D Stairs with probuilder tool
        /// </summary>
        /// <param name="steps"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="sidesGoToFloor"></param>
        /// <param name="generateBack"></param>
        /// <param name="platformsOnly"></param>
        /// <returns></returns>
        public GameObject GenerateStairs(int steps, float width, float height, float depth, bool sidesGoToFloor, bool generateBack = true, bool platformsOnly = false)
        {
            pb_Object stairs = pb_ShapeGenerator.StairGenerator(steps, width, height, depth, sidesGoToFloor, generateBack, platformsOnly);
            return stairs.gameObject;
        }

        /// <summary>
        /// Generate 2D version of the stairs
        /// It is NOT generated by Probuilder but in the RoundedStairsScript
        /// </summary>
        /// <param name="s">Stairs data</param>
        /// <returns></returns>
        public GameObject Generate2DStairs(Stairs s)
        {
            var go = Instantiate(roundedStairs2DPrefab);
            go.GetComponent<RoundedStairsScript>().associatedStairs = s;
            go.GetComponent<RoundedStairsScript>().Draw();
            return go;
        }

        /// <summary>
        /// Destroy unity scene objects
        /// </summary>
        /// <param name="obj">2d or 3d gameobject</param>
        public void DestroyPreviousStairs(GameObject obj)
        {
            if (obj)
            {
                Destroy(obj);
            }
        }

        /// <summary>
        /// Generate Curved stairs 3D
        /// </summary>
        /// <param name="innerRadius"></param>
        /// <param name="circumference"></param>
        /// <param name="steps"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="sidesGoToFloor"></param>
        /// <param name="toTheLeft"></param>
        /// <returns></returns>
        public GameObject GenerateCurvedStairs(float innerRadius, float circumference, int steps, float width, float height, bool sidesGoToFloor, bool toTheLeft)
        {
            pb_Object stairs = pb_ShapeGenerator.CurvedStairGenerator(width, height, innerRadius, toTheLeft ? -circumference : circumference, steps, sidesGoToFloor);
            return stairs.gameObject;
        }

        /// <summary>
        /// Called by UI
        /// </summary>
        public void CreateStairs()
        {
            Stairs s = new Stairs
            {
                BuildSides = true,
                Depth = 5,
                Width = 2,
                Height = WallsCreator.Instance.wallHeight,
                NbSteps = 10
            };
            m_stairs.Add(s);
            s.RebuildSceneData();
            SelectedObjectManager.Instance.Select(s);
        }

        /// <summary>
        /// Load all stairs of a floor
        /// </summary>
        /// <param name="floor">Floor data</param>
        public void LoadStairsFromFloor(Floor floor)
        {
            while (m_stairs.Count > 0)
            {
                DestroyStairs(m_stairs.First());
            }
            m_stairs = new List<Stairs>();
            foreach (var s in floor.Stairs)
            {
                m_stairs.Add(s);
            }
            foreach (var s in m_stairs)
            {
                s.RebuildSceneData();
            }
        }

        /// <summary>
        /// Seek all associated objects in stairs to find the Stairs object concerned
        /// </summary>
        /// <param name="go">Associated Gameobject, can be 2D or 3D</param>
        /// <returns>The Stairs data or null if not found</returns>
        public Stairs GetStairsFromGameObject(GameObject go)
        {
            foreach (var s in m_stairs)
            {
                if (go == s.associated2DObject || go == s.associated3DObject)
                {
                    return s;
                }
            }

            foreach (var s in m_stairs)
            {
                for (int i = 0; i < s.associated2DObject.transform.childCount; i++)
                {
                    if (s.associated2DObject.transform.GetChild(i).gameObject == go)
                    {
                        return s;
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// Instantiate associated object
        /// </summary>
        /// <param name="associated2DObject">associated2DObject prefab</param>
        /// <returns>instiantiated object</returns>
        public GameObject InstantiateSelf(GameObject associated2DObject)
        {
            return Instantiate(associated2DObject);
        }

        /// <summary>
        /// Destroy a stairs by destroying gameobject and set data to null
        /// </summary>
        /// <param name="s">The stairs</param>
        public void DestroyStairs(Stairs s)
        {
            m_stairs.Remove(s);
            Destroy(s.associated2DObject);
            Destroy(s.associated3DObject);
        }

        /// <summary>
        /// Destroy every stairs (gameobjects and data)
        /// </summary>
        public override void DestroyEverything()
        {
            while (m_stairs.Count > 0)
            {
                DestroyStairs(m_stairs.First());
            }
            m_stairs = new List<Stairs>();
        }

        /// <summary>
        /// Paste a copied stairs by getting a copy and instantiate it, and rebuilding gameobjects
        /// </summary>
        /// <param name="m_copiedElement">Copied stairs</param>
        /// <returns>The new stairs, identical to the copied one</returns>
        public override Element CopyPaste(Element stairs)
        {
            var s = stairs as Stairs;
            Stairs newStairs = s.GetCopy() as Stairs;
            m_stairs.Add(newStairs);
            newStairs.RebuildSceneData();
            return newStairs;
        }

        /// <summary>
        /// Get all stairs
        /// </summary>
        /// <returns>a list containing all stairs</returns>
        public List<Stairs> GetStairs()
        {
            return m_stairs;
        }
    }
}